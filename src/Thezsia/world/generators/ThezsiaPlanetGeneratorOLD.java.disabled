package Thezsia.world.generators;

import Thezsia.world.ColorPassage;
import Thezsia.world.HeightPassage;
import arc.graphics.Color;
import arc.math.Mathf;
import arc.math.geom.Vec3;
import arc.struct.Seq;
import arc.util.Tmp;
import arc.util.noise.*;
import mindustry.maps.generators.PlanetGenerator;
import mindustry.type.Sector;
import mindustry.world.Block;

import static Thezsia.content.Thezsia.blocks.ThezsiaEnv.*;

public class ThezsiaPlanetGeneratorOLD extends PlanetGenerator {

    public Seq<HeightPassage> heights = new Seq<>();
    public Seq<ColorPassage> colors = new Seq<>();
    public float baseHeight = 1;
    public Color baseColor = Color.valueOf("3c3838");
    public static int sulfurSeed = 5, sulfurOct = 2;
    public static float sulfurScl = 0.1f, sulfurMag = 0.25f;

    Block[] terrain = {peridotiteWall, basalticWall, basalticWall, sulfurWall, sulfurWall, peridotiteWall, charrokWall, basalticWall, basalticWall, basalticWall, peridotiteWall};

    Color c1 = Color.valueOf("7c5c2b"), c2 = Color.valueOf("6c522c"), out = new Color();

    @Override
    public void generateSector(Sector sector){
        //ohno
    }

    @Override
    public float getHeight(Vec3 position){
        float height = baseHeight;
        for(HeightPassage h : heights){
            height = h.height(position, height);
        }
        return height;
    }

    /*@Override
    public Color getColor(Vec3 position){
        float depth = Simplex.noise3d(seed, 2, 0.56, 1.7f, position.x, position.y, position.z) / 2f;
        if (Math.abs(position.y) + depth> 1.08) {return c1.write(out).lerp(c2, Mathf.clamp(Mathf.round(depth, 0.25f))).a(0.5f);}
        Block blocks = getBlock(position);

        if(blocks == sulfurWall) blocks = sulfurFloor;

        return Tmp.c1.set(blocks.mapColor).a(1f - blocks.albedo);
    }*/

    float rawTemp(Vec3 position){
        return position.dst(0, 0, 1)*2.2f - Simplex.noise3d(seed, 7, 0.5f, 0.7f, 10f + position.x, 10f + position.y, 10f + position.z) * 2.9f;
    }

    Block getBlock(Vec3 position){
        float ice = rawTemp(position);
        Tmp.v32.set(position);

        float height = rawHeight(position);
        Tmp.v31.set(position);
        height *= 1.2f;
        height = Mathf.clamp(height);

        Block result = terrain[Mathf.clamp((int)(height * terrain.length), 0, terrain.length - 1)];

        if(ice < 0.2 + Math.abs(Ridged.noise3d(seed + sulfurSeed, position.x + 2.5f, position.y + 6f, position.z + 1.2f, sulfurOct, sulfurScl)) * sulfurMag){
            return sulfurWall;
        }

        return result;
    }

    float rawHeight(Vec3 position){
        return Simplex.noise3d(seed, 8, 0.7f, 1f, position.x, position.y, position.z);
    }
}